name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache frontend npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
      - name: Install
        run: npm ci
      - name: Test
        run: npm test

  backend:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: blep
          POSTGRES_PASSWORD: blep
          POSTGRES_DB: blep_test
        options: >-
          --health-cmd "pg_isready -U blep" --health-interval 5s --health-timeout 5s --health-retries 10
        ports:
          - 54329:5432
    env:
      TEST_DB_URL: postgres://blep:blep@localhost:54329/blep_test
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache backend npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-
      - name: Install
        run: npm ci
      - name: Wait for Postgres
        env:
          TEST_DB_URL: ${{ env.TEST_DB_URL }}
        run: |
          node -e 'const {Client}=require("pg");(async()=>{for(let i=0;i<40;i++){try{const c=new Client({connectionString:process.env.TEST_DB_URL});await c.connect();await c.end();console.log("Postgres ready");process.exit(0);}catch(e){await new Promise(r=>setTimeout(r,1000));}}console.error("Postgres not ready in time");process.exit(1);})()'
      - name: Migrate
        env:
          DATABASE_URL: ${{ env.TEST_DB_URL }}
        run: |
          echo "Using DATABASE_URL=$DATABASE_URL"
          npx node-pg-migrate up -m migrations
      - name: Test
        run: DATABASE_URL=${{ env.TEST_DB_URL }} npm test
  # E2E API TESTS TEMPORARILY DISABLED
  # - name: Backend E2E (API level)
  #   run: |
  #     echo "Running API E2E migrations with DATABASE_URL=${{ env.TEST_DB_URL }}"
  #     DATABASE_URL=${{ env.TEST_DB_URL }} npx node-pg-migrate up -m migrations
  #     DATABASE_URL=${{ env.TEST_DB_URL }} npm run seed
  #     DATABASE_URL=${{ env.TEST_DB_URL }} npm run test:e2e

  # fullstack-e2e job temporarily disabled to speed up CI and avoid flaky Selenium failures
  # fullstack-e2e:
  #   name: Full Stack Selenium E2E (disabled)
  #   runs-on: ubuntu-latest
  #   needs: [frontend, backend]
  #   steps:
  #     - run: echo "Fullstack E2E disabled"

  lint-build:
    name: Build Frontend (Smoke)
    runs-on: ubuntu-latest
    needs: [frontend]
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache frontend npm (lint-build)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
      - name: Install
        run: npm ci
      - name: Build
        run: npm run build

