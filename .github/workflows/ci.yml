name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache frontend npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
      - name: Install
        run: npm ci
      - name: Test
        run: npm test

  backend:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: blep
          POSTGRES_PASSWORD: blep
          POSTGRES_DB: blep_test
        options: >-
          --health-cmd "pg_isready -U blep" --health-interval 5s --health-timeout 5s --health-retries 10
        ports:
          - 54329:5432
    env:
      TEST_DB_URL: postgres://blep:blep@localhost:54329/blep_test
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache backend npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-
      - name: Install
        run: npm ci
      - name: Wait for Postgres
        env:
          TEST_DB_URL: ${{ env.TEST_DB_URL }}
        run: |
          node -e 'const {Client}=require("pg");(async()=>{for(let i=0;i<40;i++){try{const c=new Client({connectionString:process.env.TEST_DB_URL});await c.connect();await c.end();console.log("Postgres ready");process.exit(0);}catch(e){await new Promise(r=>setTimeout(r,1000));}}console.error("Postgres not ready in time");process.exit(1);})()'
      - name: Migrate
        run: |
          # Explicitly pass connection string; relying only on implicit defaults would hit 5432 instead of mapped 54329
          npx node-pg-migrate up -m migrations -d ${{ env.TEST_DB_URL }}
      - name: Test
        run: DATABASE_URL=${{ env.TEST_DB_URL }} npm test
      - name: Backend E2E (API level)
        run: |
          # Use -d to ensure node-pg-migrate uses the correct port (54329) instead of default 5432
          npx node-pg-migrate up -m migrations -d ${{ env.TEST_DB_URL }}
          DATABASE_URL=${{ env.TEST_DB_URL }} npm run seed
          DATABASE_URL=${{ env.TEST_DB_URL }} npm run test:e2e

  fullstack-e2e:
    name: Full Stack Selenium E2E
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: blep
          POSTGRES_PASSWORD: blep
          POSTGRES_DB: blep
        options: >-
          --health-cmd "pg_isready -U blep" --health-interval 5s --health-timeout 5s --health-retries 10
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node (backend)
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache backend npm (fullstack)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-
      - name: Install backend deps
        working-directory: backend
        run: npm ci
      - name: Run migrations
        working-directory: backend
        env:
          DATABASE_URL: postgres://blep:blep@localhost:5432/blep
        run: |
          # Explicit -d avoids any accidental fallback to default host/port
          npx node-pg-migrate up -m migrations -d postgres://blep:blep@localhost:5432/blep
      - name: Verify Postgres (fullstack job)
        run: |
          node -e 'const {Client}=require("pg");(async()=>{for(let i=0;i<40;i++){try{const c=new Client({connectionString:"postgres://blep:blep@localhost:5432/blep"});await c.connect();await c.end();console.log("Postgres ready");process.exit(0);}catch(e){await new Promise(r=>setTimeout(r,1000));}}console.error("Postgres not ready in time");process.exit(1);})()'
      - name: Start backend
        working-directory: backend
        env:
          DATABASE_URL: postgres://blep:blep@localhost:5432/blep
          PORT: 4000
          CORS_ORIGINS: http://localhost:8080
        run: |
          node src/server.js &
          echo $! > backend.pid
      - name: Wait for backend health
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:4000/healthz > /dev/null; then echo "Backend up"; break; fi
            sleep 1
            if [ "$i" -eq 60 ]; then echo "Backend failed to start" >&2; exit 1; fi
          done
      - name: Setup Node (frontend)
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache frontend npm (fullstack)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
      - name: Install frontend deps
        working-directory: frontend
        run: npm ci
      - name: Build frontend
        working-directory: frontend
        env:
          VITE_API_BASE: http://localhost:4000
        run: npm run build
      - name: Serve frontend
        working-directory: frontend
        run: |
          npx --yes serve -s dist -l 8080 &
          echo $! > frontend.pid
      - name: Wait for frontend
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:8080 > /dev/null; then echo "Frontend up"; break; fi
            sleep 1
            if [ "$i" -eq 60 ]; then echo "Frontend failed to start" >&2; exit 1; fi
          done
      - name: Install E2E deps
        run: npm --prefix e2e ci
      - name: Run Selenium E2E
        env:
          FRONTEND_URL: http://localhost:8080
          BACKEND_HEALTH: http://localhost:4000/healthz
        run: node e2e/test.e2e.mjs
      - name: Cleanup background processes
        if: always()
        run: |
          kill $(cat backend.pid 2>/dev/null) 2>/dev/null || true
          kill $(cat frontend.pid 2>/dev/null) 2>/dev/null || true

  lint-build:
    name: Build Frontend (Smoke)
    runs-on: ubuntu-latest
    needs: [frontend]
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache frontend npm (lint-build)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-
      - name: Install
        run: npm ci
      - name: Build
        run: npm run build

